version: "3.9"

services:
  # Zookeeper is a dependency for Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    volumes:
      - ./data/zookeeper/data:/data
    restart: always
    ports:
      - 127.0.0.1:2181:2181
    networks:
      - pwm_net
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "127.0.0.1", "2181", "|", "grep", "imok"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Message Queue
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - 127.0.0.1:9092:9092
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "Inbox-T:1:0,Sync-T:1:0"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    restart: always
    volumes:
      - ./data/kafka/data:/data
    networks:
      - pwm_net
    depends_on:
      zookeeper:
        condition: service_healthy

  # etcd Service
  etcd:
    image: quay.io/coreos/etcd:v3.5.2
    container_name: etcd
    ports:
      - 127.0.0.1:2379:2379
      - 127.0.0.1:2380:2380
    volumes:
      - ./data/etcd/data:/data
    environment:
      ETCDCTL_API: 3
      ETCD_DATA_DIR: /data
      ETCD_NAME: node1
      INITIAL_CLUSTER_TOKEN: etcd-test-cluster
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_INITIAL_CLUSTER: node1=http://etcd:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_AUTO_COMPACTION_RETENTION: 1
    restart: always
    command: /usr/local/bin/etcd
    networks:
      - pwm_net
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Service
  redis:
    image: redis
    container_name: redis-pwm
    ports:
      - 127.0.0.1:6379:6379
    volumes:
      - ./data/redis/data:/data:rw
    restart: always
    command: redis-server --appendonly yes
    networks:
      - pwm_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL Database
  mysql:
    image: mysql:5.7
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-my_root_secret}
      MYSQL_DATABASE: teamgram
      MYSQL_USER: teamgram
      MYSQL_PASSWORD: ${DB_PASSWORD:-teamgram}
    ports:
      - 127.0.0.1:3306:3306
    volumes:
      - ./data/mysql/data:/var/lib/mysql:Z
      - ./teamgramd/sql:/docker-entrypoint-initdb.d/:Z
    command:
      - "--default-authentication-plugin=mysql_native_password"
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_general_ci"
      - "--explicit_defaults_for_timestamp=true"
      - "--lower_case_table_names=1"
    restart: always
    networks:
      - pwm_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    volumes:
      - ./data/minio/data:/data
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: miniostorage
    command: server /data --console-address ":9001"
    restart: always
    networks:
      - pwm_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO MC for Initialization
  minio_mc:
    image: minio/mc:latest
    container_name: minio_mc
    volumes:
      - ./minio_init.sh:/minio_init.sh
    entrypoint: /minio_init.sh
    networks:
      - pwm_net

  # Teamgram Service
  teamgram:
    build: .
    container_name: teamgram
    restart: always
    ports:
      - "10443:10443"
      - "11443:11443"
      - "20450:20450"
      - "20010:20010"
      - "20020:20020"
      - "20640:20640"
      - "20110:20110"
      - "5222:5222"
      - "8801:8801"
      - "20660:20660"
      - "20650:20650"
      - "20030:20030"
      - "20120:20120"
      - "20670:20670"
      - "20420:20420"
    networks:
      - pwm_net
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
      etcd:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      mysql:
        condition: service_healthy

networks:
  pwm_net:
    driver: bridge
